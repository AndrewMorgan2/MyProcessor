add (add two register) store = r2 + r3
sub (add two register) store = r2 - r3
mul (add two register) store = r2 * r3
div (add two register) store = r2 / r3
addi (add register and value) store = r2 + x
cmp (compare two registers) store = r2 comp r3 (Less than => -1, equal => 0, greater than => 1)
ld (load regsiter + offset) store = (value inside) r2 + x
ldc (load register directly) store = (value inside) r2
beq (branch if equal) newPCPostition, register || value (if 0 then branch)
bne (branch if not equal) newPCPostition, register || value (if 1 || -1 then branch)

//Operands to be added
jump (to instruction)
NoP (do nothing)